#!/bin/csh

set sluschipath = `grep sluschipath ~/.sluschi.rc | cut -d'=' -f2`
set vaspcmd = `getinfo.csh vaspcmd job.in`
getinfo.csh detectfail job.in > /dev/null
if ( $? == 0 ) then
  @ detectfail = `getinfo.csh detectfail job.in`
else
  @ detectfail = 0
endif
getinfo.csh maxwaithour job.in > /dev/null
if ( $? == 0 ) then
  @ maxwaithour = `getinfo.csh maxwaithour job.in`
else
  @ maxwaithour = 24
endif
getinfo.csh mlff job.in > /dev/null  
if ( $? == 0 ) then
  @ mlff = `getinfo.csh mlff job.in`
else
  @ mlff = 0
endif

@ snapnum = `cat snapnum`

# submit the first job
sleep 5
set nstep=0
set nstep = `expr $nstep + 1`
if ( $mlff == 1 ) then
$sluschipath/UpdateINCAR ML_LMLFF .TRUE. 
$sluschipath/UpdateINCAR ML_ISTART 0 
$sluschipath/UpdateINCAR ML_MHIS 5
$sluschipath/UpdateINCAR ALGO N 
endif
$vaspcmd jobsub > jobsub.log
@ flag_gamma = 0
echo job $nstep submitted
# initialize flags
@ flag_homo = 0
@ flag_avgstart = 0
@ stopflag = 0
@ count = 0
while ($stopflag == 0)
  sleep 60 ############################################################
  if ( -e OUTCAR ) then
  if ( $detectfail == 1 ) then # inspect VASP job and check if it fails
    @ begin = 0
    head OUTCAR | grep vasp > /dev/null
    if ( $? == 0 ) @ begin = 1
    @ complete = 1
    tail OUTCAR | grep Ela > /dev/null
    if ( $? == 1 ) @ complete = 0
    if ( $begin == 1 && $complete == 0 ) then # this VASP job successfully started but it failed to complete.
      set last = `ls -l OUTCAR`
      sleep 300
      set new = `ls -l OUTCAR`
      if ( "$last" == "$new" ) then # no update after 5 min: FAILED JOB
        rm OUTCAR
        touch OUTCAR
        echo FAILED VASP job detected: job did not finish. Restarting... 
        $vaspcmd jobsub >> jobsub.log
      endif
    endif
    @ timecount = 0
    while ( $begin == 0 ) # VASP Header not written for "$maxwaithour" hours... This VASP job failed to start.
      sleep 600
      getinfo.csh maxwaithour job.in > /dev/null
      if ( $? == 0 ) then
        @ maxwaithour = `getinfo.csh maxwaithour job.in`
      else
        @ maxwaithour = 24
      endif
      @ maxwaithour = `awk 'BEGIN{print '$maxwaithour'*6}'`
      head OUTCAR | grep vasp > /dev/null
      if ( $? == 0 ) @ begin = 1
      @ timecount = $timecount + 1
      if ( $timecount == $maxwaithour ) then # WARNING!!! Job may wait in queue for hours! If queue is busy, SET detectfail to 0!
        rm OUTCAR
        touch OUTCAR
        echo FAILED VASP job detected: job failed to start. Restarting... 
        $vaspcmd jobsub >> jobsub.log
        @ begin = 1
      endif
    end
  endif
  grep -s "Total CPU" OUTCAR > /dev/null
  if (! $?) then # a VASP run is completed

    echo ====== JOB $nstep DONE ======

    if ( $count == 0 ) then
      echo --- Calculate Pulay stress... ---
      $sluschipath/PressurePulay > /dev/null
    endif
    @ count = $count + 1
    if ( $count == 10 ) @ count = 0
    set pressure_Pulay = `cat pressure_Pulay.out`

    $sluschipath/GetPTE # get P, T and E
    grep 'in kB' OUTCAR -B1 | grep -v 'in kB' | grep -v ' 0.00 ' | grep -v '\-\-' | grep -v CPU | grep -v cpu | awk '{print $2,$3,$4,$5,$6,$7}' > pressure3.out # get Pxx, Pyy, Pzz, Pxy, Pyz, Pzx
    if ( $nstep == 1 ) then
      @ nlines = `cat pressure3.out | wc -l`
      @ nlines = `awk 'BEGIN{print ('$nlines'-'$nlines'%2)/2}'`
      tail -$nlines pressure3.out > pressure3.out_tmp
      mv pressure3.out_tmp pressure3.out
    endif
    set volume=`grep volume/ion OUTCAR | awk '{print $5}'`
    set temp=`grep TEEND INCAR | awk '{print $3}'`
    set pressure_kinetic=`awk -v k="1.38e-23" -v a="1.0e22" -v b=$temp -v c=$volume 'BEGIN{print (k*b/c*a)}'`
    echo $pressure_kinetic > pressure_kinetic.out

    set pressure_target = `getinfo.csh press job.in`
    echo $pressure_target  > pressure_target.out
    grep 'volume of cell' OUTCAR | awk '{print $5}' >> volume.out

    $sluschipath/PressureAvg.x

    head -5 POSCAR | tail -3 > lattice.out
    set v1 = `head -1 lattice.out`
    set v2 = `head -2 lattice.out | tail -1`
    set v3 = `head -3 lattice.out | tail -1`
    rm lattice.out
    set p = `cat pressure3_total.out`
    set pxx = `echo $p | awk '{print $1}'`
    set pyy = `echo $p | awk '{print $2}'`
    set pzz = `echo $p | awk '{print $3}'`
    set pxy = `echo $p | awk '{print $4}'`
    set pyz = `echo $p | awk '{print $5}'`
    set pxz = `echo $p | awk '{print $6}'`
    echo $v1 $v2 $v3 $p >> lattice_pressure_history.out
    echo Pulay stress $pressure_Pulay, kinetic pressure $pressure_kinetic, pressure target $pressure_target kbar.
    echo "--- LATTICE VECTORS --- \t\t --- PRESSURE ---"
    echo "$v1 \t $pxx $pxy $pxz" 
    echo "$v2 \t $pxy $pyy $pyz"
    echo "$v3 \t $pxz $pyz $pzz"

    set navg_pressure = `getinfo.csh navg job.in`
    set factor_divide = `getinfo.csh factor job.in`
    echo $navg_pressure > param.in
    echo $factor_divide >> param.in
    $sluschipath/DetermineSize.x

    echo --- ADJUST INCAR TAGS ---
    $sluschipath/AdjustPOTIM
    $sluschipath/AdjustNBANDS
    $sluschipath/AdjustBMIX

    mkdir $nstep
    cp INCAR KPOINTS POSCAR OSZICAR $nstep
    @ NKPTS = `grep NKPTS OUTCAR | awk '{print $4}'`
    @ gamma = `getinfo.csh gamma_possible job.in`
    mv OUTCAR $nstep
    touch OUTCAR

    # decide whether to stop or not.
    # homo?
    if ( -d 20 && $count == 0 ) then
      cd anal
      $sluschipath/bopcollect
      cd history # anal/history
      getinfo.csh diff_solid ../../job.in > /dev/null
      if ( $? == 0 ) then
        getinfo.csh diff_solid ../../job.in > diff.in
      else
        echo 0.5 > diff.in
      endif
      getinfo.csh diff_liquid ../../job.in > /dev/null
      if ( $? == 0 ) then
        getinfo.csh diff_liquid ../../job.in >> diff.in
      else
        echo 1.0 >> diff.in
      endif
      getinfo.csh diff_select ../../job.in > /dev/null
      if ( $? == 0 ) then
        getinfo.csh diff_select ../../job.in >> diff.in
      else
        echo -1 >> diff.in
      endif
      grep '^Direct$' ../../CONTCAR -B1 | grep -v Direct > natoms
      cp ../../../../../stop_info.in .
      $sluschipath/anal
      set avg_left = `head -1 avghalf | awk '{print $1}'`
      set avg_right = `head -1 avghalf | awk '{print $2}'`
      @ flag_solid = `cat flag_solid`
      @ flag_homo = `cat flag_homo`
      set nlines_avghalf = `cat avghalf | wc -l`
      set energy  = ` grep E0 ../../OSZICAR | tail -1 | awk '{print $7}'`
      if ( $nlines_avghalf == 2) then
        set n_int = `tail -1 avghalf`
        echo $avg_left $avg_right $n_int $energy >> ../../stop_history
      else
        echo $avg_left $avg_right >> ../../stop_history
      endif
      cd ../..
      if ( $flag_homo == 1 ) then
        if ( $flag_solid == 1 ) then 
          @ stopflag = 1
          echo $snapnum 1 >> ../record_results
        else
          if ( $nlines_avghalf == 2 && $n_int < 9 ) then
            @ stopflag = 1
            echo $snapnum 0 >> ../record_results
          endif
        endif
      endif
    endif
    # cannot achieve converge
    if ( -d 300 ) then
      @ stopflag = 1
      echo $snapnum 2 FAILED! ABANDON. >> ../record_results
    endif

    if ( $stopflag == 0 ) then
      head -2 CONTCAR > POSCAR
      cat lattice_predict.out >> POSCAR
      tail -n+6 CONTCAR >> POSCAR
      if ( $NKPTS == 1 && $gamma == 1 && -e ../../../../jobsub_gamma ) then
        if ( $flag_gamma == 0 ) then
          cp IBZKPT KPOINTS
          rm WAVECAR
          @ flag_gamma = 1
        endif
        cp ../../../../jobsub_gamma jobsub
      else
        cp ../../../../jobsub .
      endif
      rm WAVECAR
      if ( -e ML_ABN ) then
          cp ML_ABN ML_AB
          $sluschipath/UpdateINCAR ML_ISTART 1
      endif
      $vaspcmd jobsub >> jobsub.log
      set nstep = `expr $nstep + 1`
      echo Job $nstep submitted. Waiting for job $nstep to finish...
    endif
  endif
  endif
end
set pwd = `pwd`
if ( $flag_solid == 1 ) then
echo \*\*\* SOLID in $pwd \*\*\* >> ../../../../SLUSCHI.out
else
echo \*\*\* LIQUID in $pwd \*\*\* >> ../../../../SLUSCHI.out
endif
cp INCAR ../../../..
cp INCAR ../../src_coex
echo killing script...
